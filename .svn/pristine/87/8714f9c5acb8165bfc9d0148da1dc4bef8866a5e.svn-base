package com.isp.searchengine;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;

public class Indexer {
	String[] englishStopwordsArray = { " ", "it", "every", "least", "less",
			"many", "now", "ever", "never", "say", "says", "said", "also",
			"get", "go", "goes", "just", "made", "make", "put", "see", "seen",
			"whether", "like", "well", "back", "even", "still", "way", "take",
			"since", "another", "however", "two", "three", "four", "five",
			"first", "second", "new", "old", "high", "long", "again",
			"further", "then", "once", "here", "there", "when", "where", "why",
			"how", "all", "any", "both", "each", "few", "more", "most",
			"other", "some", "such", "no", "nor", "not", "only", "own", "same",
			"so", "than", "too", "very", "and", "but", "if", "or", "because",
			"as", "until", "while", "of", "at", "by", "for", "with", "about",
			"against", "between", "into", "through", "during", "before",
			"after", "above", "below", "to", "from", "up", "down", "in", "out",
			"on", "off", "over", "under", "a", "an", "the", "oughtn't",
			"mightn't", "daren't", "needn't", "let's", "that's", "who's",
			"what's", "here's", "there's", "when's", "where's", "why's",
			"how's", "won't", "wouldn't", "shan't", "shouldn't", "can't",
			"cannot", "couldn't", "mustn't", "isn't", "aren't", "wasn't",
			"weren't", "hasn't", "haven't", "hadn't", "doesn't", "don't",
			"didn't", "i'm", "you're", "he's", "she's", "it's", "we're",
			"they're", "i've", "you've", "we've", "they've", "i'd", "you'd",
			"he'd", "she'd", "we'd", "they'd", "i'll", "you'll", "he'll",
			"she'll", "we'll", "they'll", "ought", "must", "may", "might",
			"could", "can", "should", "shall", "will", "would", "do", "does",
			"did", "doing", "have", "has", "had", "having", "am", "is", "are",
			"was", "were", "be", "been", "being", "what", "which", "who",
			"whom", "this", "that", "these", "those", "they", "them", "their",
			"theirs", "themselves", "i", "me", "my", "the", "myself", "we",
			"us", "usually", "our", "ours", "ourselves", "you", "your",
			"yours", "yourself", "yourselves", "he", "him", "his", "himself",
			"she", "her", "hers", "herself", "one", "its", "itself" };

	public boolean parse(String primURL, int docid) throws IOException, ClassNotFoundException, SQLException {
		URL url1 = new URL(primURL);
		//System.out.println(new Timestamp(date.getTime()));

		// Create_tables cr = new Create_tables();
		// cr.create();

		BufferedReader br = new BufferedReader(new InputStreamReader(
				url1.openStream()));
		String inputline = "";
		String contents = "";

		while ((inputline = br.readLine()) != null) {
			contents = contents + inputline;

		}
		// System.out.println("The HTML content of URL:" + contents);
		br.close();
		contents = contents.replaceAll("<script.*?</script>", "")
				.replaceAll("<style.*?</style>", " ").replaceAll("<.*?>", " ")
				.replaceAll("[^a-zA-Z]", " ").replaceAll("\\s+", " ")
				.toLowerCase().trim();
		// System.out.println("The parsed content of URL:" + contents);
		HashMap<String, Integer> englishstopwords = new HashMap<String, Integer>();

		for (int i = 0; i < englishStopwordsArray.length; i++) {
			englishstopwords.put(englishStopwordsArray[i], 1);
		}

		/*
		 * for (int i =0; i < englishStopwordsArray.length;i++) { contents =
		 * contents.replaceAll(englishStopwordsArray[i], " "); }
		 */

		String[] keys = contents.split(" ");
		Stemmer s = new Stemmer();
		HashMap<String, Integer> keywords = new HashMap<String, Integer>();
		String stemmedkeyword = "";
		for (int j = 0; j < keys.length; j++) {
			// if(keys[j].length()!=1)
			// {
			if (!englishstopwords.containsKey(keys[j])
					&& (keys[j].length() != 1)) {
				char[] w = keys[j].toCharArray();
				s.add(w, keys[j].length());
				s.stem(); // Stemming
				stemmedkeyword = s.toString();
			}

			if (keywords.containsKey(stemmedkeyword)) {
				keywords.put(stemmedkeyword, keywords.get(stemmedkeyword) + 1);
			} else
				keywords.put(stemmedkeyword, 1);
			// }

		}
		Storetables st = new Storetables();
		st.storetofeatures(keywords, docid);
		// for(String key: keywords.keySet())
		// {
		// System.out.println("Term :" + key + "        count:" +
		// keywords.get(key));
		// }
		return true;
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException, SQLException {
		String url = "http://www.google.co.in";
		Indexer in = new Indexer();
		System.out.println("Calling parse");
		in.parse(url, 1);
		Date date2 = new Date();
		System.out.println(new Timestamp(date2.getTime()));

	}
}
