package com.searchengine;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Crawl {
	//final static int Max_depth = 4;
	// Maximum number of documents to crawl
	//final static int Max_Num_Doc = 40;
	static Queue<String> primQueue = new LinkedList<String>();
	static Queue<String> secQueue = new LinkedList<String>();
	static Queue<String> holder = new LinkedList<String>();
	static Set<String> parsed = new LinkedHashSet<String>();
	private static Scanner in;
	static Indexer index = new Indexer();
	static Storetables st = new Storetables();
	static int docid;
	static int depth = 0;


	public static int startCrawling(String host,int Max_depth,int Max_Num_Doc,String ans) throws Exception 
	{
		//Host url 
		//String host ="http://www.thehindu.com/";
		primQueue.add(host);
		System.out.println("Host url:" + host);
		System.out.println("Entry level:" +depth);
		//Create necessary tables 
		Create_tables cr = new Create_tables();
		cr.create();
		//get the last recent Docid
		docid = st.getDocid() + 1;
	
		//Get the domain of the host URL
		String hostDomain = checkDomain(host);
		//Get a response from the User to allow/deny to leave the domain
		Boolean response;
		while (true) {
			
			 ans = ans.trim().toLowerCase();
			if (ans.equals("y")) {
				response = true;
				break;
			} else if (ans.equals("n")) {
				response = false;
				break;
			} else {
				return -1;
			}
		}
		while (!primQueue.isEmpty() || !secQueue.isEmpty()) {
			if (secQueue.isEmpty()) {
				//CrawlerThread.primQueue =new CrawlerThread(1);
				processPrimQueue(primQueue,depth,hostDomain,response,Max_depth,Max_Num_Doc);
				depth++;
				System.out.println(" Level "+ depth+" is completed.");

			} else if (primQueue.isEmpty()) {
				
				processSecQueue( secQueue, depth,  hostDomain, response,Max_depth,Max_Num_Doc); 
				depth++;
				System.out.println(" Level "+ depth+" is completed.");
			}
			System.out.println("Number of docs parsed: " + parsed.size());
			if (depth >= Max_depth || parsed.size() >= Max_Num_Doc) {
				System.out.println("Final Unique Links: ");
				for (String str : parsed) {
					// System.out.println("Before");
					int id = st.storetotemp(str, docid);
					st.storetodocuments(str, id);
					System.out.println("\n" + str);
					//docid++;
				}
				st.computetf_idf();
				System.out.println("I am breaking loop @ Level " + depth + " "
						+ "\n Total number of documents parsed are: "
						+ parsed.size());
				break;
			}
			// System.out.println("***************Time to calculate TF*IDF score****************************************");
			// System.out.println("Computation stored in DB");
		}
		return parsed.size();
	}
	
	public static void processPrimQueue(Queue<String> primQueue, int depth, String hostDomain, Boolean response,int Max_depth,int  Max_Num_Doc)
			throws ClassNotFoundException, SQLException, IOException {
		System.out.println(">>>>>>secQueue is empty>>>>>>>>>");

		while (!primQueue.isEmpty() && depth <= Max_depth && parsed.size() < Max_Num_Doc) {
			try {
				Boolean restart = st.verifyurl();
				String primURL = null;
				// Check to restart if it was aborted
				while (restart && depth == 0) {
					LinkedHashSet<String> parsedURLs = new LinkedHashSet<String>();
					parsedURLs = st.getParsedurl();
					parsed.addAll(parsedURLs);
					ArrayList<String> testholder = new ArrayList<String>();
					String r = parsedURLs.toArray()[parsedURLs.size() - 1].toString();
					int lasturlid = st.storetotemp(r, docid);
					int fromid = st.getfromid(lasturlid);
					System.out.println("Restarted from: " + r + " its docid is:" + fromid);
					primURL = st.geturl(fromid);
					if(!primURL.isEmpty())
					testholder.addAll(getLinksFromSite(primURL));
					for (int m = lasturlid + 3; m < testholder.size(); m++) {
						System.out.println("next urls to parse after breakup:" + m + " " + testholder.get(m));
						secQueue.add(testholder.get(m));
					}
					break;
				}
				// else{
				primURL = primQueue.poll();
				primURL = trimURL(primURL);
				int id = st.storetotemp(primURL, docid);
				// System.out.println("id: "+id);
				if (id >= docid)
					docid++;
				if (index.parse(primURL, id)) {
					System.out.println(primURL + " is Parsed.");
					if (parsed.isEmpty()) {
						parsed.add(primURL);
						st.storeinparsed(primURL, id);
					}

					String urlDomain = checkDomain(primURL);
					if (urlDomain.equalsIgnoreCase(hostDomain) || response) {
						holder.addAll(getLinksFromSite(primURL));
						secQueue.addAll(removeRedundant(holder, parsed));
						for (String str : secQueue) {
							str = trimURL(str);
							int oid = st.storetotemp(str, docid);
							// System.out.println("rid :"+oid);
							if (oid >= docid)
								docid++;
							st.storeLinks(id, oid);
						}
						System.out.println(
								"ALL tempQueue contents: " + secQueue.size() + " \n Parsed size: " + parsed.size());
						holder.clear();
					}
					String parsedtest = parsed.toArray()[parsed.size() - 1].toString();
					if (!primURL.equalsIgnoreCase(parsedtest)) {
						int rid = st.storetotemp(primURL, id);
						// System.out.println("rid :"+rid);
						if (rid >= docid)
							docid++;
						st.storeinparsed(primURL, rid);
					}
					parsed.add(primURL);
				}
			} catch (SocketTimeoutException exception) {
				continue;
			}
			catch (MalformedURLException me) {
	            System.err.println("MalformedURLException: " + me);
	        } catch (IOException ioe) {
	            System.err.println("IOException: " + ioe);
	        }
		}
	}
	
	public static void processSecQueue(Queue<String> secQueue, int depth, String hostDomain, Boolean response,int Max_depth,int  Max_Num_Doc) throws ClassNotFoundException, SQLException, IOException{

		System.out.println("************primQueue is empty*************");
		while (!secQueue.isEmpty() && depth <= Max_depth
				&& parsed.size() < Max_Num_Doc) {
			try{
			String secURL = secQueue.poll();
			secURL = trimURL(secURL);
			int id = st.storetotemp(secURL, docid);
			//System.out.println("id in else if: "+id);
			if(id>=docid)
				docid++;
			if (index.parse(secURL, id)){
				System.out.println(secURL+" is Parsed.");
				String urlDomain = checkDomain(secURL);
				if (urlDomain.equalsIgnoreCase(hostDomain) || response) {	
					holder.addAll(getLinksFromSite(secURL));
					primQueue.addAll(removeRedundant(holder, parsed));
					for (String str:primQueue){
						str = trimURL(str);
						int oid = st.storetotemp(str, docid);
						//System.out.println("oid in else if: "+oid);
						if(oid>=docid)
							docid++;
						st.storeLinks(id,oid);
						}
				}
				String parsedtest = parsed.toArray()[parsed.size()-1].toString();
				if(!secURL.equalsIgnoreCase(parsedtest)){		
					int rid = st.storetotemp(secURL, id);
					//System.out.println("id in else if: "+rid);
					if(rid>=docid)
						docid++;
					st.storeinparsed(secURL,rid);
					}
				parsed.add(secURL);
			}
			System.out.println("ALL tempQueue contents: "+primQueue.size() +" \n Parsed size: "+parsed.size());
			holder.clear();
			}
			catch (SocketTimeoutException exception) {
				continue;
			}
			catch (MalformedURLException me) {
	            System.err.println("MalformedURLException: " + me);
	        } catch (IOException ioe) {
	            System.err.println("IOException: " + ioe);
	        }
			
		}
	}


	public static String checkDomain(String CheckURL) {
		String domainString =null;
		// gets rid of everything before the first dot
		String tempString = CheckURL.substring(CheckURL.indexOf(".") + 1,CheckURL.length()); 
		//System.out.println("tempString: "+tempString);
		// grabs everything before the second dot
		if(tempString.indexOf(".")>0)
		 domainString = tempString.substring(0, tempString.indexOf("."));
		else 
			domainString = CheckURL.substring(CheckURL.indexOf("/") + 2,CheckURL.indexOf("."));
		
		return domainString;
	}

	public static String trimURL(String url) {
		if ((url).endsWith("/")){
			//System.out.println("Testin trimURL");
			 return url= url.substring(0,(url).length() - 1);
		} else
			return url;
	}

	private static Queue<String> removeRedundant(Queue<String> url2trim, Set<String> parsed){
		//Iterator<String> ite = url2trim.iterator();
		for (String str : parsed) {
			Iterator<String> ite = url2trim.iterator();
		while (ite.hasNext()) {
				String tempurl = ite.next();
				tempurl = trimURL(tempurl);
				 String trimtempurl = tempurl.substring(tempurl.indexOf(":") + 1,tempurl.length()); 
				String trimstr = str.substring(str.indexOf(":") + 1,str.length()); 	
				String urlend = tempurl.substring(tempurl.length() - 3);
				if (urlend.equalsIgnoreCase("pdf")||urlend.equalsIgnoreCase("ico")||urlend.equalsIgnoreCase("png")){
					//System.out.println("dummy extension url : "+tempurl);
					ite.remove();
				}
				else if (str.equalsIgnoreCase(tempurl)||trimstr.equalsIgnoreCase(trimtempurl)) {
					ite.remove();
					//System.out.println("Removed?: Url: " + tempurl+ "\ntrimstr: "+trimstr+"\ntrimtempurl: "+trimtempurl);
				}

			}
		}
		return url2trim;
	}

	private static List<String> getLinksFromSite(String url) {
		List<String> connnectedURL = new ArrayList<String>();
		try {
			System.out.println("url.string::: " + url);
			BufferedReader input = new BufferedReader(new InputStreamReader(
					new URL(url).openStream()));
			StringBuilder readStr = new StringBuilder();
			String tempreadStr = "";
			while (null != (tempreadStr = input.readLine())) {
				readStr.append(tempreadStr);
			}
			Pattern hrf = (Pattern.compile("href=\"(.*?)\""));
			Matcher m1 = hrf.matcher(readStr);
			String href = null;
			while (m1.find()) {
				href = m1.group(1);
				if (href.contains(("http://"))||(href.contains(("https://")))) {
					connnectedURL.add(href);
				}
			}
			System.out.println("Outgoing links: " + connnectedURL.size());
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Please verify for exception");
		}
		return connnectedURL;
	}
}
